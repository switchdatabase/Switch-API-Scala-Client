/**
 * Switch Database REST API
 * Switch API is the primary endpoint of data sevices and Switch DB's platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 *
 * OpenAPI spec version: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.AddResponse
import io.swagger.client.model.Body
import io.swagger.client.model.Error
import io.swagger.client.model.SetResponse
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class DBOperationsApi(val defBasePath: String = "http://tr02.switchapi.com/",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Add is used for adding a data object to the list created at Switch DB.
   * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
   * @param aPIKey Your Switch API Key. 
   * @param accessToken Your Access Token. 
   * @param list Your data list name. 
   * @param body Your new value JSON. 
   * @return AddResponse
   */
  def addPost(aPIKey: String, accessToken: String, list: String, body: String): Option[AddResponse] = {
    // create path and map variables
    val path = "/Add".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (aPIKey == null) throw new Exception("Missing required parameter 'aPIKey' when calling DBOperationsApi->addPost")

    if (accessToken == null) throw new Exception("Missing required parameter 'accessToken' when calling DBOperationsApi->addPost")

    if (list == null) throw new Exception("Missing required parameter 'list' when calling DBOperationsApi->addPost")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DBOperationsApi->addPost")

    
    headerParams += "APIKey" -> aPIKey
    headerParams += "AccessToken" -> accessToken
    headerParams += "List" -> list

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[AddResponse]).asInstanceOf[AddResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * It&#39;s used for listing a data added before.
   * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
   * @param aPIKey Your Switch API Key. 
   * @param accessToken Your Access Token. 
   * @param list Your data list name. 
   * @param body Your Switch DB Query. 
   * @return void
   */
  def listPost(aPIKey: String, accessToken: String, list: String, body: Body) = {
    // create path and map variables
    val path = "/List".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (aPIKey == null) throw new Exception("Missing required parameter 'aPIKey' when calling DBOperationsApi->listPost")

    if (accessToken == null) throw new Exception("Missing required parameter 'accessToken' when calling DBOperationsApi->listPost")

    if (list == null) throw new Exception("Missing required parameter 'list' when calling DBOperationsApi->listPost")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DBOperationsApi->listPost")

    
    headerParams += "APIKey" -> aPIKey
    headerParams += "AccessToken" -> accessToken
    headerParams += "List" -> list

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * It&#39;s used for deleting a data added before at Switch DB.
   * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
   * @param aPIKey Your Switch API Key. 
   * @param accessToken Your Access Token. 
   * @param list Your data list name. 
   * @param listItemId Your list item id. 
   * @return SetResponse
   */
  def setDelete(aPIKey: String, accessToken: String, list: String, listItemId: String): Option[SetResponse] = {
    // create path and map variables
    val path = "/Set".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (aPIKey == null) throw new Exception("Missing required parameter 'aPIKey' when calling DBOperationsApi->setDelete")

    if (accessToken == null) throw new Exception("Missing required parameter 'accessToken' when calling DBOperationsApi->setDelete")

    if (list == null) throw new Exception("Missing required parameter 'list' when calling DBOperationsApi->setDelete")

    if (listItemId == null) throw new Exception("Missing required parameter 'listItemId' when calling DBOperationsApi->setDelete")

    
    headerParams += "APIKey" -> aPIKey
    headerParams += "AccessToken" -> accessToken
    headerParams += "List" -> list
    headerParams += "ListItemId" -> listItemId

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SetResponse]).asInstanceOf[SetResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * It&#39;s used for updating a data object that is already added to Switch DB.
   * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
   * @param aPIKey Your Switch API Key. 
   * @param accessToken Your Access Token. 
   * @param list Your data list name. 
   * @param listItemId Your list item id. 
   * @param body Your new value JSON. 
   * @return SetResponse
   */
  def setPost(aPIKey: String, accessToken: String, list: String, listItemId: String, body: String): Option[SetResponse] = {
    // create path and map variables
    val path = "/Set".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (aPIKey == null) throw new Exception("Missing required parameter 'aPIKey' when calling DBOperationsApi->setPost")

    if (accessToken == null) throw new Exception("Missing required parameter 'accessToken' when calling DBOperationsApi->setPost")

    if (list == null) throw new Exception("Missing required parameter 'list' when calling DBOperationsApi->setPost")

    if (listItemId == null) throw new Exception("Missing required parameter 'listItemId' when calling DBOperationsApi->setPost")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DBOperationsApi->setPost")

    
    headerParams += "APIKey" -> aPIKey
    headerParams += "AccessToken" -> accessToken
    headerParams += "List" -> list
    headerParams += "ListItemId" -> listItemId

    var postBody: AnyRef = body

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SetResponse]).asInstanceOf[SetResponse])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
